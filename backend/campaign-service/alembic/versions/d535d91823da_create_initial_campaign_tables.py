"""Create initial campaign tables

Revision ID: d535d91823da
Revises: 
Create Date: 2025-06-28 11:58:47.512782

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd535d91823da'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('role', sa.String(length=20), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username'),
    schema='users'
    )
    op.create_table('campaigns',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('agency_id', sa.UUID(), nullable=False),
    sa.Column('brand_id', sa.UUID(), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('thumbnail_url', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('draft', 'active', 'paused', 'completed', 'cancelled', name='campaignstatus'), nullable=True),
    sa.Column('payout_model', sa.Enum('fixed_per_post', 'gmv_commission', 'hybrid', 'retainer_gmv', name='payoutmodel'), nullable=False),
    sa.Column('tracking_method', sa.Enum('hashtag', 'product_link', 'spark_code', name='trackingmethod'), nullable=False),
    sa.Column('start_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('end_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('grace_period_days', sa.Integer(), nullable=True),
    sa.Column('is_rolling_30_day', sa.Boolean(), nullable=True),
    sa.Column('max_creators', sa.Integer(), nullable=True),
    sa.Column('min_deliverables_per_creator', sa.Integer(), nullable=True),
    sa.Column('require_approval', sa.Boolean(), nullable=True),
    sa.Column('require_discord_join', sa.Boolean(), nullable=True),
    sa.Column('discord_server_id', sa.String(length=100), nullable=True),
    sa.Column('discord_role_name', sa.String(length=100), nullable=True),
    sa.Column('base_payout_per_post', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('gmv_commission_rate', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.Column('retainer_amount', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('total_budget', sa.DECIMAL(precision=12, scale=2), nullable=True),
    sa.Column('spent_amount', sa.DECIMAL(precision=12, scale=2), nullable=True),
    sa.Column('hashtag', sa.String(length=100), nullable=True),
    sa.Column('tiktok_product_links', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('target_gmv', sa.DECIMAL(precision=12, scale=2), nullable=True),
    sa.Column('target_posts', sa.Integer(), nullable=True),
    sa.Column('target_views', sa.Integer(), nullable=True),
    sa.Column('referral_bonus_enabled', sa.Boolean(), nullable=True),
    sa.Column('referral_bonus_amount', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['agency_id'], ['users.users.id'], ),
    sa.ForeignKeyConstraint(['brand_id'], ['users.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='campaigns'
    )
    op.create_table('campaign_products',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('campaign_id', sa.UUID(), nullable=False),
    sa.Column('tiktok_product_id', sa.String(length=100), nullable=False),
    sa.Column('product_name', sa.String(length=255), nullable=True),
    sa.Column('product_url', sa.Text(), nullable=False),
    sa.Column('product_price', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('is_primary', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['campaign_id'], ['campaigns.campaigns.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='campaigns'
    )
    op.create_table('campaign_segments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('campaign_id', sa.UUID(), nullable=False),
    sa.Column('segment_name', sa.String(length=100), nullable=False),
    sa.Column('segment_description', sa.Text(), nullable=True),
    sa.Column('gender_filter', sa.ARRAY(sa.Enum('male', 'female', 'non_binary', 'prefer_not_to_say', name='gendertype')), nullable=True),
    sa.Column('age_min', sa.Integer(), nullable=True),
    sa.Column('age_max', sa.Integer(), nullable=True),
    sa.Column('min_followers', sa.Integer(), nullable=True),
    sa.Column('max_followers', sa.Integer(), nullable=True),
    sa.Column('required_niches', sa.ARRAY(sa.String(length=100)), nullable=True),
    sa.Column('location_filter', sa.ARRAY(sa.String(length=100)), nullable=True),
    sa.Column('max_creators_in_segment', sa.Integer(), nullable=True),
    sa.Column('custom_payout_per_post', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('custom_deliverable_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['campaign_id'], ['campaigns.campaigns.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='campaigns'
    )
    op.create_table('gmv_bonus_tiers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('campaign_id', sa.UUID(), nullable=False),
    sa.Column('tier_name', sa.String(length=100), nullable=False),
    sa.Column('min_gmv', sa.DECIMAL(precision=12, scale=2), nullable=False),
    sa.Column('max_gmv', sa.DECIMAL(precision=12, scale=2), nullable=True),
    sa.Column('bonus_type', sa.String(length=20), nullable=False),
    sa.Column('bonus_value', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['campaign_id'], ['campaigns.campaigns.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='campaigns'
    )
    op.create_table('leaderboard_bonuses',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('campaign_id', sa.UUID(), nullable=False),
    sa.Column('position_start', sa.Integer(), nullable=False),
    sa.Column('position_end', sa.Integer(), nullable=False),
    sa.Column('bonus_amount', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('metric_type', sa.String(length=20), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['campaign_id'], ['campaigns.campaigns.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='campaigns'
    )
    op.create_table('creator_applications',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('campaign_id', sa.UUID(), nullable=False),
    sa.Column('creator_id', sa.UUID(), nullable=False),
    sa.Column('segment_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.Enum('pending', 'approved', 'rejected', 'waitlisted', name='applicationstatus'), nullable=True),
    sa.Column('applied_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('reviewed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('reviewed_by', sa.UUID(), nullable=True),
    sa.Column('application_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['campaign_id'], ['campaigns.campaigns.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['creator_id'], ['users.users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reviewed_by'], ['users.users.id'], ),
    sa.ForeignKeyConstraint(['segment_id'], ['campaigns.campaign_segments.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='campaigns'
    )
    op.create_table('deliverables',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('application_id', sa.UUID(), nullable=False),
    sa.Column('deliverable_number', sa.Integer(), nullable=False),
    sa.Column('due_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.Enum('pending', 'submitted', 'approved', 'rejected', 'overdue', name='deliverablestatus'), nullable=True),
    sa.Column('tiktok_post_url', sa.Text(), nullable=True),
    sa.Column('post_caption', sa.Text(), nullable=True),
    sa.Column('hashtags_used', sa.ARRAY(sa.String(length=255)), nullable=True),
    sa.Column('submitted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('approved_by', sa.UUID(), nullable=True),
    sa.Column('agency_feedback', sa.Text(), nullable=True),
    sa.Column('revision_requested', sa.Boolean(), nullable=True),
    sa.Column('revision_notes', sa.Text(), nullable=True),
    sa.Column('views_count', sa.Integer(), nullable=True),
    sa.Column('likes_count', sa.Integer(), nullable=True),
    sa.Column('comments_count', sa.Integer(), nullable=True),
    sa.Column('shares_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['application_id'], ['campaigns.creator_applications.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['approved_by'], ['users.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='campaigns'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('deliverables', schema='campaigns')
    op.drop_table('creator_applications', schema='campaigns')
    op.drop_table('leaderboard_bonuses', schema='campaigns')
    op.drop_table('gmv_bonus_tiers', schema='campaigns')
    op.drop_table('campaign_segments', schema='campaigns')
    op.drop_table('campaign_products', schema='campaigns')
    op.drop_table('campaigns', schema='campaigns')
    op.drop_table('users', schema='users')
    # ### end Alembic commands ###
